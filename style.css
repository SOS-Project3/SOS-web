// app.js
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import { getDatabase, ref, onValue, get, update } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js";

/* -------- Firebase -------- */
const firebaseConfig = {
  apiKey: "AIzaSyCXDxynz9AKrexXIUmvza8xnPA2HriiePQ",
  authDomain: "sos-project-23171.firebaseapp.com",
  databaseURL: "https://sos-project-23171-default-rtdb.firebaseio.com",
  projectId: "sos-project-23171",
  storageBucket: "sos-project-23171.firebasestorage.app",
  messagingSenderId: "739080997565",
  appId: "1:739080997565:web:8794ee9ba4f4f27de4c5d4"
};
const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

/* -------- Local Storage Keys -------- */
const LS = {
  device: "sos_device_id",
  meat: "sos_meat",
  doneness: "sos_doneness",
};

/* -------- Utilities -------- */
const $ = (sel) => document.querySelector(sel);
const byId = (id) => document.getElementById(id);
const show = (el) => el && el.classList.remove("hidden");
const hide = (el) => el && el.classList.add("hidden");
const stamp = (el) => el && (el.textContent = `(updated ${new Date().toLocaleTimeString()})`);

function openNav() {
  const navDrawer = byId("navDrawer");
  const navToggle = byId("navToggle");
  const backdrop = byId("backdrop");
  navDrawer.classList.add("open");
  backdrop.classList.remove("hidden");
  navToggle.setAttribute("aria-expanded", "true");
  navDrawer.setAttribute("aria-hidden", "false");
  document.body.classList.add("no-scroll");
}
function closeNav() {
  const navDrawer = byId("navDrawer");
  const navToggle = byId("navToggle");
  const backdrop = byId("backdrop");
  navDrawer.classList.remove("open");
  backdrop.classList.add("hidden");
  navToggle.setAttribute("aria-expanded", "false");
  navDrawer.setAttribute("aria-hidden", "true");
  document.body.classList.remove("no-scroll");
}
function wireNav() {
  const navToggle = byId("navToggle");
  const backdrop = byId("backdrop");
  if (navToggle) navToggle.addEventListener("click", () => (byId("navDrawer").classList.contains("open") ? closeNav() : openNav()));
  if (backdrop) backdrop.addEventListener("click", closeNav);
}

/* -------- Shared Device Helpers -------- */
function getSavedDevice() {
  return localStorage.getItem(LS.device) || "";
}
function setSavedDevice(id) {
  localStorage.setItem(LS.device, id);
}
function saveSelections(meat, doneness) {
  localStorage.setItem(LS.meat, meat || "");
  localStorage.setItem(LS.doneness, doneness || "");
}
function restoreSelections(meatSelect, donenessSelect, donenessNote) {
  const meat = localStorage.getItem(LS.meat) || "";
  const done = localStorage.getItem(LS.doneness) || "";
  if (meat && meatSelect) meatSelect.value = meat;
  updateDonenessForMeat(meatSelect, donenessSelect, donenessNote);
  if (done && donenessSelect) donenessSelect.value = done;
}
function updateDonenessForMeat(meatSelect, donenessSelect, donenessNote) {
  if (!meatSelect || !donenessSelect) return;
  const meat = meatSelect.value;
  if (meat === "Chicken") {
    donenessSelect.value = "Well Done";
    donenessSelect.disabled = true;
    if (donenessNote) show(donenessNote);
  } else {
    donenessSelect.disabled = false;
    if (donenessSelect.value === "Well Done") donenessSelect.value = "";
    if (donenessNote) hide(donenessNote);
  }
}

/* -------- Page Initializers -------- */
async function initDevicePage() {
  const input = byId("deviceIDInput");
  const btn = byId("setDeviceBtn");
  const confirm = byId("deviceConfirmation");

  // Pre-fill with saved device, if any
  const saved = getSavedDevice();
  if (saved && input) input.value = saved;

  if (btn) {
    btn.addEventListener("click", async () => {
      const id = (input.value || "").trim();
      if (!id) { alert("Please enter a device ID."); return; }
      try {
        const deviceRef = ref(db, `devices/${id}`);
        const snap = await get(deviceRef);
        if (!snap.exists()) {
          alert("Device ID not found in Firebase. Please check and try again.");
          return;
        }
        setSavedDevice(id);
        confirm.textContent = `Device ID set to: ${id}`;
        show(confirm);
      } catch (e) {
        alert("Error checking device ID: " + e.message);
      }
    });
  }
}

function initLivePage() {
  const deviceId = getSavedDevice();
  const warn = byId("liveWarning");
  const tempSpan = byId("temp");
  const statusSpan = byId("status");
  const connectionSpan = byId("connection");
  const wifiSpeedSpan = byId("wifiSpeed");
  const tempAt = byId("tempAt");
  const statusAt = byId("statusAt");
  const connAt = byId("connAt");
  const wifiAt = byId("wifiAt");

  if (!deviceId) {
    if (warn) {
      warn.textContent = "No device selected. Go to Device ID page to set one.";
      show(warn);
    }
    return;
  }

  // Subscribe to live data
  const tempRef = ref(db, `devices/${deviceId}/liveData/temperature`);
  const statusRef = ref(db, `devices/${deviceId}/liveData/status`);
  const connectionRef = ref(db, `devices/${deviceId}/liveData/isConnected`);
  const wifiSpeedRef = ref(db, `devices/${deviceId}/liveData/wifiSpeed`);

  onValue(tempRef, (snap) => { if (tempSpan) tempSpan.textContent = snap.val() ?? "--"; stamp(tempAt); });
  onValue(statusRef, (snap) => { if (statusSpan) statusSpan.textContent = snap.val() ?? "--"; stamp(statusAt); });
  onValue(connectionRef, (snap) => { if (connectionSpan) connectionSpan.textContent = snap.val() ? "Connected âœ…" : "Disconnected âš "; stamp(connAt); });
  onValue(wifiSpeedRef, (snap) => { if (wifiSpeedSpan) wifiSpeedSpan.textContent = snap.val() ?? "--"; stamp(wifiAt); });
}

function enablePrefsControls(enabled, meatSelect, donenessSelect, startBtn, stopBtn) {
  if (meatSelect) meatSelect.disabled = !enabled;
  if (donenessSelect) donenessSelect.disabled = !enabled;
  if (startBtn) startBtn.disabled = !enabled;
  if (stopBtn) stopBtn.disabled = !enabled;
}

function initPrefsPage() {
  const deviceId = getSavedDevice();
  const meatSelect = byId("meatSelect");
  const donenessSelect = byId("donenessSelect");
  const donenessNote = byId("donenessNote");
  const startBtn = byId("startBtn");
  const stopBtn = byId("stopBtn");
  const confirmText = byId("confirmation");

  enablePrefsControls(!!deviceId, meatSelect, donenessSelect, startBtn, stopBtn);

  if (!deviceId) {
    if (confirmText) {
      confirmText.textContent = "No device selected. Go to Device ID page to set one.";
      show(confirmText);
    }
    return;
  }

  // Restore previous selections
  restoreSelections(meatSelect, donenessSelect, donenessNote);

  if (meatSelect) {
    meatSelect.addEventListener("change", () => {
      updateDonenessForMeat(meatSelect, donenessSelect, donenessNote);
      saveSelections(meatSelect.value, donenessSelect.value);
    });
  }
  if (donenessSelect) {
    donenessSelect.addEventListener("change", () => {
      saveSelections(meatSelect.value, donenessSelect.value);
    });
  }

  async function sendPreferencesToast() {
    const meat = meatSelect.value;
    const doneness = donenessSelect.value;
    if (!meat || !doneness) { alert("Select both meat type and doneness."); return false; }
    try {
      await update(ref(db, `devices/${deviceId}/settings`), { meatType: meat, doneness });
      if (confirmText) {
        confirmText.textContent = `âœ… Preferences sent: ${meat} - ${doneness}`;
        show(confirmText);
        setTimeout(() => hide(confirmText), 2000);
      }
      return true;
    } catch (e) {
      alert("Error sending preferences: " + e.message);
      return false;
    }
  }

  if (startBtn) {
    startBtn.addEventListener("click", async () => {
      const ok = await sendPreferencesToast();
      if (!ok) return;
      try {
        await update(ref(db, `devices/${deviceId}/settings`), { command: "start" });
        if (confirmText) {
          confirmText.textContent = `ðŸ”¥ Cooking started: ${meatSelect.value} - ${donenessSelect.value}`;
          show(confirmText);
          setTimeout(() => hide(confirmText), 3000);
        }
      } catch (e) {
        alert("Error: " + e.message);
      }
    });
  }

  if (stopBtn) {
    stopBtn.addEventListener("click", async () => {
      try {
        await update(ref(db, `devices/${deviceId}/settings`), { command: "stop" });
        if (confirmText) {
          confirmText.textContent = "ðŸ›‘ Cooking stopped.";
          show(confirmText);
          setTimeout(() => hide(confirmText), 3000);
        }
      } catch (e) {
        alert("Error: " + e.message);
      }
    });
  }
}

/* -------- Boot per page -------- */
wireNav();

const pageHas = (id) => !!document.getElementById(id);

// Decide which page weâ€™re on by checking for unique elements
if (pageHas("deviceIDInput") && pageHas("setDeviceBtn")) {
  initDevicePage();
} else if (pageHas("temp") && pageHas("wifiSpeed")) {
  initLivePage();
} else if (pageHas("meatSelect") && pageHas("donenessSelect")) {
  initPrefsPage();
} else {
  // index.html: just nav + description (nothing else needed)
}
